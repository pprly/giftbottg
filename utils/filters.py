"""
–ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è + –¥–∏–∞–ø–∞–∑–æ–Ω —É—á–∞—Å—Ç–∏–π (min/max)
"""

from database_postgres import db
from typing import Dict, Any


class ParticipantFilter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
    """
    
    @staticmethod
    async def check_min_referrals(user_id: int, min_count: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            min_count: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            
        Returns:
            True –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è >= min_count —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        """
        count = await db.get_referral_count(user_id)
        return count >= min_count
    
    @staticmethod
    async def check_min_contests(user_id: int, min_count: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            min_count: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤–æ–≤–∞–ª >= min_count —Ä–∞–∑
        """
        stats = await db.get_user_stats(user_id)
        return stats['total_contests'] >= min_count
    
    @staticmethod
    async def check_max_contests(user_id: int, max_count: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_count: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤–æ–≤–∞–ª <= max_count —Ä–∞–∑
        """
        stats = await db.get_user_stats(user_id)
        return stats['total_contests'] <= max_count
    
    @staticmethod
    async def check_conditions(user_id: int, conditions: Dict[str, Any]) -> tuple[bool, tuple]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conditions: –°–ª–æ–≤–∞—Ä—å —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
                {
                    'first_n': 10,
                    'min_referrals': 5,
                    'min_contests': 3,
                    'max_contests': 10
                }
        
        Returns:
            tuple (bool, tuple): (—É—Å–ø–µ—Ö, (—Ç–∏–ø_–æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É–µ–º–æ–µ, —Ç–µ–∫—É—â–µ–µ) –µ—Å–ª–∏ –Ω–µ—É—Å–ø–µ—Ö)
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        stats = await db.get_user_stats(user_id)
        user_contests = stats['total_contests']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        if 'min_referrals' in conditions:
            min_refs = conditions['min_referrals']
            if not await ParticipantFilter.check_min_referrals(user_id, min_refs):
                current = await db.get_referral_count(user_id)
                return False, ("min_referrals", min_refs, current)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏–π
        if 'min_contests' in conditions:
            min_contests = conditions['min_contests']
            if user_contests < min_contests:
                return False, ("min_contests", min_contests, user_contests)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏–π
        if 'max_contests' in conditions:
            max_contests = conditions['max_contests']
            if user_contests > max_contests:
                return False, ("max_contests", max_contests, user_contests)
        
        # –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        return True, ()
    
    @staticmethod
    def format_conditions(conditions: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–Ω–æ–Ω—Å–µ
        
        Args:
            conditions: –°–ª–æ–≤–∞—Ä—å —Å —É—Å–ª–æ–≤–∏—è–º–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏
        """
        parts = []
        
        if 'first_n' in conditions:
            parts.append(f"üë• –ü–µ—Ä–≤—ã–µ {conditions['first_n']} —á–µ–ª–æ–≤–µ–∫")
        
        if 'min_referrals' in conditions:
            parts.append(f"üîó –ú–∏–Ω–∏–º—É–º {conditions['min_referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
        
        # –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É—á–∞—Å—Ç–∏–π
        has_min = 'min_contests' in conditions
        has_max = 'max_contests' in conditions
        
        if has_min and has_max:
            # –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç X –¥–æ Y
            min_c = conditions['min_contests']
            max_c = conditions['max_contests']
            parts.append(f"üéØ –û—Ç {min_c} –¥–æ {max_c} —É—á–∞—Å—Ç–∏–π")
        elif has_min:
            # –¢–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º
            parts.append(f"üéØ –ú–∏–Ω–∏–º—É–º {conditions['min_contests']} —É—á–∞—Å—Ç–∏–π")
        elif has_max:
            # –¢–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º (–Ω–æ–≤–∏—á–∫–∏!)
            max_c = conditions['max_contests']
            if max_c == 0:
                parts.append(f"üÜï –¢–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–∫–∏ (0 —É—á–∞—Å—Ç–∏–π)")
            elif max_c == 1:
                parts.append(f"üÜï –¢–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–∫–∏ (0-1 —É—á–∞—Å—Ç–∏–µ)")
            else:
                parts.append(f"üéØ –ú–∞–∫—Å–∏–º—É–º {max_c} —É—á–∞—Å—Ç–∏–π")
        
        if conditions.get('all_subscribers', False):
            parts.append("üì¢ –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞")
        
        return "\n".join(f"‚Ä¢ {part}" for part in parts) if parts else "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"