import { useState, useEffect } from 'react'
import { Card, List, Cell, Section, Button, Placeholder } from '@telegram-apps/telegram-ui'
import { fetchUserStats } from '../api'
import './StatsPage.css'

function StatsPage({ user, tg }) {
  const [stats, setStats] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    loadStats()
  }, [user])

  const loadStats = async () => {
    try {
      setLoading(true)
      setError(null)
      const data = await fetchUserStats()
      setStats(data)
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    } finally {
      setLoading(false)
    }
  }

  const shareReferral = () => {
    if (tg) {
      const botUsername = import.meta.env.VITE_BOT_USERNAME || 'your_bot'
      const referralLink = `https://t.me/${botUsername}?start=ref_${user?.id}`
      
      tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫–æ–Ω–∫—É—Ä—Å–∞–º! üéÅ')}`)
    }
  }

  if (loading) {
    return (
      <div className="stats-page">
        <Placeholder description="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...">
          <span style={{ fontSize: '48px' }}>üìä</span>
        </Placeholder>
      </div>
    )
  }

  if (error) {
    return (
      <div className="stats-page">
        <Placeholder 
          description={error}
          action={<Button onClick={loadStats}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</Button>}
        >
          <span style={{ fontSize: '48px' }}>‚ö†Ô∏è</span>
        </Placeholder>
      </div>
    )
  }

  return (
    <div className="stats-page">
      <div className="stats-header">
        <h1>–ü—Ä–∏–≤–µ—Ç, {user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã</h1>
        <p>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ—Ç–µ</p>
      </div>

      <List>
        <Section header="üìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
          <Cell 
            subtitle="–†–µ—Ñ–µ—Ä–∞–ª–æ–≤"
            after={<span className="stat-value">{stats.referrals}</span>}
          >
            üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π
          </Cell>
          <Cell 
            subtitle="–£—á–∞—Å—Ç–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö"
            after={<span className="stat-value">{stats.totalContests}</span>}
          >
            üéØ –£—á–∞—Å—Ç–∏–µ
          </Cell>
          <Cell 
            subtitle="–ü–æ–±–µ–¥"
            after={<span className="stat-value highlight">{stats.totalWins}</span>}
          >
            üèÜ –ü–æ–±–µ–¥—ã
          </Cell>
        </Section>

        {stats.totalWins > 0 && (
          <Section header="üéñÔ∏è –ü–æ–±–µ–¥—ã –ø–æ —Ç–∏–ø–∞–º">
            <Cell after={stats.votingWins}>üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ</Cell>
            <Cell after={stats.randomWins}>üé∞ –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä</Cell>
            <Cell after={stats.spamWins}>‚ö° –°–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å</Cell>
          </Section>
        )}

        {stats.bestStreak > 0 && (
          <Section header="üî• –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è">
            <Cell after={stats.bestStreak}>
              –õ—É—á—à–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥
            </Cell>
          </Section>
        )}
      </List>

      <div className="stats-actions">
        <Card>
          <div style={{ padding: '16px' }}>
            <h3 style={{ marginBottom: '8px' }}>üí° –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π!</h3>
            <p style={{ fontSize: '14px', opacity: 0.7, marginBottom: '12px' }}>
              –ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
            </p>
            <Button 
              size="l" 
              stretched 
              onClick={shareReferral}
            >
              üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
            </Button>
          </div>
        </Card>
      </div>
    </div>
  )
}

export default StatsPage