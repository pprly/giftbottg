import { useState, useEffect } from 'react'
import { Card, List, Cell, Section, Button, Placeholder } from '@telegram-apps/telegram-ui'
import './StatsPage.css'

function StatsPage({ user, tg }) {
  const [stats, setStats] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–æ—Ç–∞
    fetchStats()
  }, [user])

  const fetchStats = async () => {
    try {
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Ç–≤–æ–µ–º—É –±–æ—Ç—É —á–µ—Ä–µ–∑ API
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
      const mockStats = {
        referrals: 5,
        totalContests: 12,
        totalWins: 3,
        votingWins: 1,
        randomWins: 1,
        spamWins: 1,
        bestStreak: 2
      }
      
      // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      setTimeout(() => {
        setStats(mockStats)
        setLoading(false)
      }, 500)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      setLoading(false)
    }
  }

  const shareReferral = () => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    if (tg) {
      const botUsername = '—Ç–≤–æ–π_–±–æ—Ç' // –ò–∑ .env –ø–æ—Ç–æ–º –≤–æ–∑—å–º–µ–º
      const referralLink = `https://t.me/${botUsername}?start=ref_${user?.id}`
      
      tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫–æ–Ω–∫—É—Ä—Å–∞–º! üéÅ')}`)
    }
  }

  if (loading) {
    return (
      <div className="stats-page">
        <Placeholder description="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...">
          <span style={{ fontSize: '48px' }}>üìä</span>
        </Placeholder>
      </div>
    )
  }

  return (
    <div className="stats-page">
      <div className="stats-header">
        <h1>–ü—Ä–∏–≤–µ—Ç, {user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã</h1>
        <p>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ—Ç–µ</p>
      </div>

      <List>
        <Section header="üìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
          <Cell 
            subtitle="–†–µ—Ñ–µ—Ä–∞–ª–æ–≤"
            after={<span className="stat-value">{stats.referrals}</span>}
          >
            üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π
          </Cell>
          <Cell 
            subtitle="–£—á–∞—Å—Ç–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö"
            after={<span className="stat-value">{stats.totalContests}</span>}
          >
            üéØ –£—á–∞—Å—Ç–∏–µ
          </Cell>
          <Cell 
            subtitle="–ü–æ–±–µ–¥"
            after={<span className="stat-value highlight">{stats.totalWins}</span>}
          >
            üèÜ –ü–æ–±–µ–¥—ã
          </Cell>
        </Section>

        {stats.totalWins > 0 && (
          <Section header="üéñÔ∏è –ü–æ–±–µ–¥—ã –ø–æ —Ç–∏–ø–∞–º">
            <Cell after={stats.votingWins}>üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ</Cell>
            <Cell after={stats.randomWins}>üé∞ –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä</Cell>
            <Cell after={stats.spamWins}>‚ö° –°–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å</Cell>
          </Section>
        )}

        {stats.bestStreak > 0 && (
          <Section header="üî• –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è">
            <Cell after={stats.bestStreak}>
              –õ—É—á—à–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥
            </Cell>
          </Section>
        )}
      </List>

      <div className="stats-actions">
        <Card>
          <div style={{ padding: '16px' }}>
            <h3 style={{ marginBottom: '8px' }}>üí° –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π!</h3>
            <p style={{ fontSize: '14px', opacity: 0.7, marginBottom: '12px' }}>
              –ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
            </p>
            <Button 
              size="l" 
              stretched 
              onClick={shareReferral}
            >
              üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
            </Button>
          </div>
        </Card>
      </div>
    </div>
  )
}

export default StatsPage