"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram Mini App
–û—Ç–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

from aiohttp import web
import json
from database_postgres import db
import hashlib
import hmac
import urllib.parse
import config


def validate_init_data(init_data: str) -> dict:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã
    """
    try:
        # –ü–∞—Ä—Å–∏–º init_data
        parsed = dict(urllib.parse.parse_qsl(init_data))
        hash_value = parsed.pop('hash', None)
        
        if not hash_value:
            raise ValueError("Hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞—ë–º data_check_string
        data_check_arr = []
        for key in sorted(parsed.keys()):
            data_check_arr.append(f"{key}={parsed[key]}")
        data_check_string = '\n'.join(data_check_arr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HMAC
        secret_key = hmac.new(
            "WebAppData".encode(),
            config.BOT_TOKEN.encode(),
            hashlib.sha256
        ).digest()
        
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()
        
        if calculated_hash != hash_value:
            raise ValueError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π hash")
        
        # –ü–∞—Ä—Å–∏–º user –¥–∞–Ω–Ω—ã–µ
        user_data = json.loads(parsed.get('user', '{}'))
        return user_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ init_data: {e}")
        raise


async def get_user_stats(request):
    """
    GET /api/stats?init_data=...
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        init_data = request.query.get('init_data')
        if not init_data:
            return web.json_response(
                {'error': 'init_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'},
                status=400
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data = validate_init_data(init_data)
        user_id = user_data.get('id')
        
        if not user_id:
            return web.json_response(
                {'error': 'user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'},
                status=400
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        stats = await db.get_user_stats(user_id)
        referral_count = await db.get_referral_count(user_id)
        
        return web.json_response({
            'success': True,
            'user_id': user_id,
            'stats': {
                'referrals': referral_count,
                'totalContests': stats.get('total_contests', 0),
                'totalWins': stats.get('total_wins', 0),
                'votingWins': stats.get('voting_wins', 0),
                'randomWins': stats.get('random_wins', 0),
                'spamWins': stats.get('spam_wins', 0),
                'bestStreak': stats.get('best_win_streak', 0)
            }
        })
        
    except ValueError as e:
        return web.json_response(
            {'error': f'–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}'},
            status=401
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_stats: {e}")
        return web.json_response(
            {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'},
            status=500
        )


async def get_leaderboard(request):
    """
    GET /api/leaderboard?type=wins|referrals|contests
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        leaderboard_type = request.query.get('type', 'wins')
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã –≤ database_postgres.py
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return web.json_response({
            'success': True,
            'type': leaderboard_type,
            'leaders': []
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_leaderboard: {e}")
        return web.json_response(
            {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'},
            status=500
        )


async def get_achievements(request):
    """
    GET /api/achievements?init_data=...
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        init_data = request.query.get('init_data')
        if not init_data:
            return web.json_response(
                {'error': 'init_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'},
                status=400
            )
        
        user_data = validate_init_data(init_data)
        user_id = user_data.get('id')
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –ë–î
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return web.json_response({
            'success': True,
            'achievements': []
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_achievements: {e}")
        return web.json_response(
            {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'},
            status=500
        )


# CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
async def add_cors_headers(request, response):
    """–î–æ–±–∞–≤–ª—è–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
    return response


def create_app():
    """–°–æ–∑–¥–∞—ë—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = web.Application()
    
    # –†–æ—É—Ç—ã
    app.router.add_get('/api/stats', get_user_stats)
    app.router.add_get('/api/leaderboard', get_leaderboard)
    app.router.add_get('/api/achievements', get_achievements)
    
    # CORS middleware
    app.middlewares.append(lambda app, handler: 
        lambda request: add_cors_headers(request, handler(request))
    )
    
    return app


async def start_api_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä"""
    app = create_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)
    await site.start()
    print("üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    return runner