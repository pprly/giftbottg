"""
Contest Bot v2.5 - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å API —Å–µ—Ä–≤–µ—Ä–æ–º
–û–±–Ω–æ–≤–ª–µ–Ω–æ: PostgreSQL + API –¥–ª—è Telegram Mini App + Traefik SSL
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher

import config
from database_postgres import DatabasePostgres
import database_postgres


async def restore_active_contests(bot: Bot):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞"""
    from handlers.contests.voting_contest import active_tasks
    from database_postgres import db
    
    print("\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤...")
    
    contests = await db.get_active_contests()
    
    if not contests:
        print("   ‚ÑπÔ∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    for contest in contests:
        contest_id = contest['id']
        contest_type = contest['contest_type']
        status = contest['status']
        
        print(f"   üîÑ –ö–æ–Ω–∫—É—Ä—Å #{contest_id} ({contest_type}, {status})")
        
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status == 'collecting':
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if contest_type == 'voting_contest':
                    from handlers.contests.voting_contest import collect_comments
                    task = asyncio.create_task(collect_comments(bot, contest_id))
                    active_tasks[f"collect_{contest_id}"] = task
                    print(f"      ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–±–æ—Ä (voting)")
                    
                elif contest_type == 'random_contest':
                    from handlers.contests.random_contest import collect_random_participants
                    task = asyncio.create_task(collect_random_participants(bot, contest_id))
                    active_tasks[f"collect_{contest_id}"] = task
                    print(f"      ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–±–æ—Ä (random)")
                    
                elif contest_type == 'spam_contest':
                    from handlers.contests.spam_contest import collect_spam_participants
                    task = asyncio.create_task(collect_spam_participants(bot, contest_id))
                    active_tasks[f"collect_{contest_id}"] = task
                    print(f"      ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–±–æ—Ä (spam)")
            
            elif status == 'voting':
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                from handlers.contests.voting_contest import start_timer
                task = asyncio.create_task(start_timer(bot, contest_id, contest['timer_minutes']))
                active_tasks[f"timer_{contest_id}"] = task
                print(f"      ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
            
            elif status == 'running' and contest_type == 'spam_contest':
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å
                from handlers.contests.spam_contest import run_spam_timer
                entry_conditions = contest.get('entry_conditions', {})
                duration = entry_conditions.get('contest_duration', 10)
                task = asyncio.create_task(run_spam_timer(bot, contest_id, duration))
                active_tasks[f"spam_timer_{contest_id}"] = task
                print(f"      ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å")
            
            elif status == 'ready_to_start':
                print(f"      ‚ÑπÔ∏è  –û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω–æ–º")
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω–∫—É—Ä—Å–æ–≤: {len(contests)}\n")


async def shutdown(bot: Bot, db: DatabasePostgres, api_runner=None):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ API"""
    from handlers.contests.voting_contest import active_tasks
    
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    if api_runner:
        try:
            print("   ‚è≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
            await api_runner.cleanup()
            print("   ‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ API: {e}")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    if active_tasks:
        print(f"   ‚è≥ –û—Ç–º–µ–Ω–∞ {len(active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
        for task_name, task in list(active_tasks.items()):
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        active_tasks.clear()
        print("   ‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î
    try:
        await db.close_pool()
        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    api_runner = None
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db = DatabasePostgres(config.POSTGRES_DSN)
        await db.init_pool()
        await db.init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        database_postgres.db = db
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = Bot(token=config.BOT_TOKEN)
        dp = Dispatcher()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
        from handlers import router
        dp.include_router(router)
        print("‚úÖ –†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–• –ö–û–ù–ö–£–†–°–û–í
        await restore_active_contests(bot)
        
        # üÜï –ó–ê–ü–£–°–ö API –°–ï–†–í–ï–†–ê –î–õ–Ø TELEGRAM MINI APP
        try:
            from api_server import start_api_server
            print("üì° –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Mini App...")
            api_runner = await start_api_server()
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
            api_runner = None
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n")
        await dp.start_polling(bot)
        
    except (KeyboardInterrupt, SystemExit):
        print("\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        await shutdown(bot, db, api_runner)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

        