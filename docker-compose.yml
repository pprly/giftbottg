services:
  # Traefik - Reverse Proxy с автоматическим SSL (DNS Challenge)
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: always
    user: "root"
    ports:
      - "80:80"      # HTTP
      - "2053:443"    # HTTPS
      - "8080:8080"  # Traefik Dashboard
    networks:
      - telegram
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/acme.json
    env_file:
      - .env.traefik
    command:
      # Основные настройки
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      
      # HTTP entrypoint
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      
      # HTTPS entrypoint
      - "--entrypoints.websecure.address=:443"
      
      # Let's Encrypt DNS Challenge (для Cloudflare)
      - "--certificatesresolvers.letsencrypt.acme.email=evgepperly@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      
      # Логи
      - "--log.level=INFO"
      - "--accesslog=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`vpnedenor.ru`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

  # Telegram Bot + API сервер
  bot:
    image: ghcr.io/pprly/giftbottg:latest
    container_name: giftbot
    restart: always
    # DNS серверы для решения проблемы с api.telegram.org
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    networks:
      - telegram
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    depends_on:
      - db
      - traefik
    labels:
      - "traefik.enable=true"
      
      # API роутинг: https://vpnedenor.ru/api/*
      - "traefik.http.routers.api.rule=Host(`vpnedenor.ru`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      
      # CORS middleware
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowmethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolalloworiginlist=https://pprly.github.io"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.routers.api.middlewares=api-cors,api-ratelimit"
      
      # Rate limiting
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=50"

  # PostgreSQL Database
  db:
    image: postgres:18
    container_name: giftbot-db
    restart: always
    networks:
      - telegram
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
    external: false

networks:
  telegram:
    driver: bridge