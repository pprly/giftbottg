"""
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import config
from database_postgres import db


router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_ID


async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üé≤ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data="create_contest")
    builder.button(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã", callback_data="active_contests")
    builder.button(text="üõë –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data="cancel_contest")
    builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.button(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(2, 1, 1, 1)
    
    await callback.message.edit_text(
        config.MESSAGES["start_admin"],
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.message(Command("chatid"))
async def get_chat_id(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ (–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\n"
        f"ID —á–∞—Ç–∞: `{message.chat.id}`\n"
        f"–¢–∏–ø: {message.chat.type}\n"
        f"Username: @{message.chat.username if message.chat.username else '–Ω–µ—Ç'}",
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "active_contests")
async def show_active_contests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    contests = await db.get_active_contests()
    
    if not contests:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        
        await callback.message.edit_text(
            "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        return
    
    text = f"üì• **–ê–ö–¢–ò–í–ù–´–ï –ö–û–ù–ö–£–†–°–´** ({len(contests)})\n\n"
    
    for contest in contests:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
        entry_conditions = contest.get('entry_conditions', {})
        conditions_text = ""
        
        if 'first_n' in entry_conditions:
            conditions_text += f"‚Ä¢ –ü–µ—Ä–≤—ã–µ {entry_conditions['first_n']} —á–µ–ª–æ–≤–µ–∫\n"
        if 'min_referrals' in entry_conditions:
            conditions_text += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º {entry_conditions['min_referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        if 'min_contests' in entry_conditions:
            conditions_text += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º {entry_conditions['min_contests']} —É—á–∞—Å—Ç–∏–π\n"
        if entry_conditions.get('all_subscribers'):
            conditions_text += "‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
        
        if not conditions_text:
            conditions_text = "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
        
        participants_count = await db.get_participants_count(contest['id'])
        
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"üÜî **–ö–æ–Ω–∫—É—Ä—Å #{contest['id']}**\n"
        text += f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
        text += f"üìù –¢–∏–ø: {config.CONTEST_TYPES.get(contest['contest_type'], {}).get('name', contest['contest_type'])}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {contest['status']}\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}/{contest['participants_count']}\n"
        text += f"‚è∞ –¢–∞–π–º–µ—Ä: {contest['timer_minutes']} –º–∏–Ω\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    text = (
        "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
        "üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è:\n"
        "‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä—Å–æ–≤\n"
        "‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω–∫—É—Ä—Å–æ–≤\n"
        "‚Ä¢ –¢–û–ü —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_contest")
async def cancel_contest_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã
    contests = await db.get_active_contests()
    
    if not contests:
        await callback.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã", show_alert=True)
        return
    
    # –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å –æ–¥–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    if len(contests) == 1:
        contest = contests[0]
        participants_count = await db.get_participants_count(contest['id'])
        
        text = (
            "‚ö†Ô∏è **–û–¢–ú–ï–ù–ê –ö–û–ù–ö–£–†–°–ê**\n\n"
            f"üÜî ID: {contest['id']}\n"
            f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {contest['status']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}/{contest['participants_count']}\n\n"
            "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω–∫—É—Ä—Å?\n\n"
            "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n"
            "‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ 'ended'\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_{contest['id']}")
        builder.button(text="‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="admin_panel")
        builder.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    text = f"üõë **–û–¢–ú–ï–ù–ê –ö–û–ù–ö–£–†–°–ê**\n\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤: **{len(contests)}**\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for contest in contests:
        participants_count = await db.get_participants_count(contest['id'])
        button_text = f"#{contest['id']}: {contest['prize'][:20]} ({participants_count} —É—á.)"
        builder.button(text=button_text, callback_data=f"select_cancel_{contest['id']}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_cancel_"))
async def select_contest_to_cancel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_id = int(callback.data.replace("select_cancel_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
    contest = await db.get_contest_by_id(contest_id)
    
    if not contest:
        await callback.answer("‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    participants_count = await db.get_participants_count(contest['id'])
    
    text = (
        "‚ö†Ô∏è **–û–¢–ú–ï–ù–ê –ö–û–ù–ö–£–†–°–ê**\n\n"
        f"üÜî ID: {contest['id']}\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {contest['status']}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}/{contest['participants_count']}\n\n"
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω–∫—É—Ä—Å?\n\n"
        "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n"
        "‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ 'ended'\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_{contest['id']}")
    builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∫–æ–Ω–∫—É—Ä—Å–æ–≤", callback_data="cancel_contest")
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_cancel_"))
async def confirm_cancel_contest(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—É—Ä—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_id = int(callback.data.replace("confirm_cancel_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
    contest = await db.get_contest_by_id(contest_id)
    
    if not contest:
        await callback.answer("‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω–∫—É—Ä—Å –∞–∫—Ç–∏–≤–Ω—ã–π
    if contest['status'] == 'ended':
        await callback.answer("‚ÑπÔ∏è –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω", show_alert=True)
        return
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'ended'
    await db.update_contest_status(contest_id, 'ended')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    try:
        await callback.bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=(
                f"‚ö†Ô∏è **–ö–û–ù–ö–£–†–° #{contest_id} –û–¢–ú–ï–ù–Å–ù**\n\n"
                f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n\n"
                "–ö–æ–Ω–∫—É—Ä—Å –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∞–Ω–æ–Ω—Å–∞–º–∏!"
            ),
            parse_mode="Markdown"
        )
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∫–æ–Ω–∫—É—Ä—Å–∞ #{contest_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    text = (
        "‚úÖ **–ö–û–ù–ö–£–†–° –û–¢–ú–ï–ù–Å–ù**\n\n"
        f"üÜî ID: {contest_id}\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n\n"
        "–ö–æ–Ω–∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'ended'.\n"
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ."
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()
