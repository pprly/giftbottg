"""
–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –≥–∏–±–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —É—á–∞—Å—Ç–∏—è
–ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ FSM
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import config
from database_postgres import db
from utils.filters import ParticipantFilter


router = Router()


class ContestCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞"""
    waiting_for_contest_type = State()
    waiting_for_prize = State()
    waiting_for_conditions = State()
    waiting_for_participants_count = State()
    waiting_for_timer = State()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è
    configuring_entry_conditions = State()
    waiting_for_min_referrals = State()
    waiting_for_min_contests = State()
    waiting_for_max_contests = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_ID


@router.callback_query(F.data == "create_contest")
async def create_contest_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –≤ —Å—Ç–∞—Ç—É—Å–µ 'collecting'
    contests = await db.get_active_contests()
    collecting_contests = [c for c in contests if c['status'] == 'collecting']
    
    if collecting_contests:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        contest = collecting_contests[0]
        text = (
            "‚ö†Ô∏è **–ù–ê–ë–û–† –£–ñ–ï –ò–î–Å–¢**\n\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω –∫–æ–Ω–∫—É—Ä—Å #{contest['id']} –≤ —Å—Ç–∞—Ç—É—Å–µ 'collecting'\n"
            f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {await db.get_participants_count(contest['id'])}/{contest['participants_count']}\n\n"
            "‚ùóÔ∏è –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–æ–∫–∞ –∏–¥—ë—Ç —Ç–µ–∫—É—â–∏–π!\n\n"
            "**–í–∞—Ä–∏–∞–Ω—Ç—ã:**\n"
            "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å ‚û°Ô∏è"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ", callback_data=f"force_start_{contest['id']}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ 'collecting' - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    for contest_type, info in config.CONTEST_TYPES.items():
        builder.button(
            text=info['name'],
            callback_data=f"contest_type_{contest_type}"
        )
    
    builder.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
    builder.adjust(2, 2, 1)
    
    await callback.message.edit_text(
        "üé≤ **–°–û–ó–î–ê–ù–ò–ï –ö–û–ù–ö–£–†–°–ê**\n\n"
        "**–®–∞–≥ 1/5:** –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–∫—É—Ä—Å–∞\n\n"
        "üó≥Ô∏è **–ì–æ–ª–æ—Å–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π** - –∞–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n"
        "üé∞ **–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä** - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä (—Å–∫–æ—Ä–æ)\n"
        "üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π** - –ø–æ–±–µ–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º (—Å–∫–æ—Ä–æ)\n"
        "‚ö° **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - –∫—Ç–æ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∫–æ—Ä–æ)",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(ContestCreation.waiting_for_contest_type)
    await callback.answer()


@router.callback_query(ContestCreation.waiting_for_contest_type, F.data.startswith("contest_type_"))
async def process_contest_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    contest_type = callback.data.replace("contest_type_", "")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º voting, random –∏ spam
    if contest_type not in ["voting_contest", "random_contest", "spam_contest"]:
        await callback.answer("üöß –≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω–∫—É—Ä—Å–∞ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)
        return
    
    await state.update_data(contest_type=contest_type)
    
    await callback.message.edit_text(
        "üéÅ **–®–∞–≥ 2/5:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–¥–≤–µ–¥—å –∑–∞ 15 –∑–≤—ë–∑–¥"
    )
    await state.set_state(ContestCreation.waiting_for_prize)
    await callback.answer()


@router.message(ContestCreation.waiting_for_prize)
async def process_prize(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–∑–∞"""
    if not is_admin(message.from_user.id):
        return
    
    await state.update_data(prize=message.text)
    
    await message.answer(
        "üìù **–®–∞–≥ 3/5:** –í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª"
    )
    await state.set_state(ContestCreation.waiting_for_conditions)


@router.message(ContestCreation.waiting_for_conditions)
async def process_conditions(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    await state.update_data(conditions=message.text)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
    await state.update_data(entry_conditions={})
    
    await show_entry_conditions_menu(message, state)


async def show_entry_conditions_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è"""
    data = await state.get_data()
    entry_conditions = data.get('entry_conditions', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
    conditions_text = "**–¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è:**\n"
    
    if 'first_n' in entry_conditions:
        conditions_text += f"‚úÖ –ü–µ—Ä–≤—ã–µ {entry_conditions['first_n']} —á–µ–ª–æ–≤–µ–∫\n"
    else:
        conditions_text += "‚ùå –ü–µ—Ä–≤—ã–µ N —á–µ–ª–æ–≤–µ–∫ (–Ω–µ –∑–∞–¥–∞–Ω–æ)\n"
    
    if 'min_referrals' in entry_conditions:
        conditions_text += f"‚úÖ –ú–∏–Ω–∏–º—É–º {entry_conditions['min_referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    else:
        conditions_text += "‚ùå –ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–Ω–µ –∑–∞–¥–∞–Ω–æ)\n"
    
    # –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —É—á–∞—Å—Ç–∏–π
    has_min = 'min_contests' in entry_conditions
    has_max = 'max_contests' in entry_conditions
    
    if has_min and has_max:
        conditions_text += f"‚úÖ –û—Ç {entry_conditions['min_contests']} –¥–æ {entry_conditions['max_contests']} —É—á–∞—Å—Ç–∏–π\n"
    elif has_min:
        conditions_text += f"‚úÖ –ú–∏–Ω–∏–º—É–º {entry_conditions['min_contests']} —É—á–∞—Å—Ç–∏–π\n"
    elif has_max:
        conditions_text += f"‚úÖ –ú–∞–∫—Å–∏–º—É–º {entry_conditions['max_contests']} —É—á–∞—Å—Ç–∏–π\n"
    else:
        conditions_text += "‚ùå –ú–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–∏–π (–Ω–µ –∑–∞–¥–∞–Ω–æ)\n"
    
    if entry_conditions.get('all_subscribers'):
        conditions_text += "‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –ü–µ—Ä–≤—ã–µ N —á–µ–ª–æ–≤–µ–∫", callback_data="set_first_n")
    builder.button(text="üîó –ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="set_min_referrals")
    builder.button(text="üéØ –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–∏–π", callback_data="set_min_contests")  # ‚Üê –£–ë–†–ê–õ–ò –ó–ê–ì–õ–£–®–ö–£
    builder.button(text="üÜï –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–∏–π", callback_data="set_max_contests")  # ‚Üê –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="entry_conditions_done")
    builder.adjust(2, 2, 1)
    
    text = (
        "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ê –£–°–õ–û–í–ò–ô –£–ß–ê–°–¢–ò–Ø**\n\n"
        f"{conditions_text}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await state.set_state(ContestCreation.configuring_entry_conditions)


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data == "set_first_n")
async def set_first_n(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="3 (—Ç–µ—Å—Ç)", callback_data="first_n_3")
    builder.button(text="10", callback_data="first_n_10")
    builder.button(text="15", callback_data="first_n_15")
    builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="first_n_custom")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_entry_menu")
    builder.adjust(3, 1, 1)
    
    await callback.message.edit_text(
        "üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–Ω—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data.startswith("first_n_"))
async def process_first_n(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    value = callback.data.replace("first_n_", "")
    
    if value == "custom":
        await callback.message.edit_text(
            "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—Ç 3 –¥–æ 100):"
        )
        await state.set_state(ContestCreation.waiting_for_participants_count)
        await callback.answer()
        return
    
    count = int(value)
    data = await state.get_data()
    entry_conditions = data.get('entry_conditions', {})
    entry_conditions['first_n'] = count
    await state.update_data(entry_conditions=entry_conditions)
    
    await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ø–µ—Ä–≤—ã–µ {count} —á–µ–ª–æ–≤–µ–∫")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_entry_conditions_menu(callback.message, state)


@router.message(ContestCreation.waiting_for_participants_count)
async def process_participants_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        count = int(message.text)
        if count < 3 or count > 100:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        entry_conditions = data.get('entry_conditions', {})
        entry_conditions['first_n'] = count
        await state.update_data(entry_conditions=entry_conditions)
        
        await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ø–µ—Ä–≤—ã–µ {count} —á–µ–ª–æ–≤–µ–∫")
        await show_entry_conditions_menu(message, state)
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 100:")


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data == "set_min_referrals")
async def set_min_referrals(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="1 —Ä–µ—Ñ–µ—Ä–∞–ª", callback_data="min_refs_1")
    builder.button(text="5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="min_refs_5")
    builder.button(text="10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="min_refs_10")
    builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="min_refs_custom")
    builder.button(text="‚ùå –£–±—Ä–∞—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data="min_refs_remove")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_entry_menu")
    builder.adjust(3, 1, 1, 1)
    
    await callback.message.edit_text(
        "üîó **–ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data.startswith("min_refs_"))
async def process_min_referrals(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º—É–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    value = callback.data.replace("min_refs_", "")
    
    data = await state.get_data()
    entry_conditions = data.get('entry_conditions', {})
    
    if value == "custom":
        await callback.message.edit_text(
            "üîó –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–æ—Ç 1 –¥–æ 50):"
        )
        await state.set_state(ContestCreation.waiting_for_min_referrals)
        await callback.answer()
        return
    elif value == "remove":
        if 'min_referrals' in entry_conditions:
            del entry_conditions['min_referrals']
        await state.update_data(entry_conditions=entry_conditions)
        await callback.answer("‚úÖ –£—Å–ª–æ–≤–∏–µ —É–±—Ä–∞–Ω–æ")
    else:
        count = int(value)
        entry_conditions['min_referrals'] = count
        await state.update_data(entry_conditions=entry_conditions)
        await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –º–∏–Ω–∏–º—É–º {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
    
    await show_entry_conditions_menu(callback.message, state)


@router.message(ContestCreation.waiting_for_min_referrals)
async def process_min_referrals_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –º–∏–Ω–∏–º—É–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        count = int(message.text)
        if count < 1 or count > 50:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        entry_conditions = data.get('entry_conditions', {})
        entry_conditions['min_referrals'] = count
        await state.update_data(entry_conditions=entry_conditions)
        
        await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –º–∏–Ω–∏–º—É–º {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
        await show_entry_conditions_menu(message, state)
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50:")


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data == "set_min_contests")
async def set_min_contests(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏–π"""
    builder = InlineKeyboardBuilder()
    builder.button(text="3 —É—á–∞—Å—Ç–∏—è", callback_data="min_contests_3")
    builder.button(text="5 —É—á–∞—Å—Ç–∏–π", callback_data="min_contests_5")
    builder.button(text="10 —É—á–∞—Å—Ç–∏–π", callback_data="min_contests_10")
    builder.button(text="20 —É—á–∞—Å—Ç–∏–π", callback_data="min_contests_20")
    builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="min_contests_custom")
    builder.button(text="‚ùå –£–±—Ä–∞—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data="min_contests_remove")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_entry_menu")
    builder.adjust(2, 2, 1, 1, 1)
    
    await callback.message.edit_text(
        "üéØ **–ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–∏–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data.startswith("min_contests_"))
async def process_min_contests(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º—É–º–∞ —É—á–∞—Å—Ç–∏–π"""
    value = callback.data.replace("min_contests_", "")
    
    data = await state.get_data()
    entry_conditions = data.get('entry_conditions', {})
    
    if value == "custom":
        await callback.message.edit_text(
            "üéØ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π (–æ—Ç 1 –¥–æ 100):"
        )
        await state.set_state(ContestCreation.waiting_for_min_contests)
        await callback.answer()
        return
    elif value == "remove":
        if 'min_contests' in entry_conditions:
            del entry_conditions['min_contests']
        await state.update_data(entry_conditions=entry_conditions)
        await callback.answer("‚úÖ –£—Å–ª–æ–≤–∏–µ —É–±—Ä–∞–Ω–æ")
    else:
        count = int(value)
        entry_conditions['min_contests'] = count
        await state.update_data(entry_conditions=entry_conditions)
        await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –º–∏–Ω–∏–º—É–º {count} —É—á–∞—Å—Ç–∏–π")
    
    await show_entry_conditions_menu(callback.message, state)


@router.message(ContestCreation.waiting_for_min_contests)
async def process_min_contests_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –º–∏–Ω–∏–º—É–º–∞ —É—á–∞—Å—Ç–∏–π"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        count = int(message.text)
        if count < 1 or count > 100:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        entry_conditions = data.get('entry_conditions', {})
        entry_conditions['min_contests'] = count
        await state.update_data(entry_conditions=entry_conditions)
        
        await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –º–∏–Ω–∏–º—É–º {count} —É—á–∞—Å—Ç–∏–π")
        await show_entry_conditions_menu(message, state)
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:")

@router.callback_query(ContestCreation.configuring_entry_conditions, F.data == "set_max_contests")
async def set_max_contests(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏–π"""
    builder = InlineKeyboardBuilder()
    builder.button(text="0 (—Å–æ–≤—Å–µ–º –Ω–æ–≤–∏—á–∫–∏)", callback_data="max_contests_0")
    builder.button(text="1 (0-1 —É—á–∞—Å—Ç–∏–µ)", callback_data="max_contests_1")
    builder.button(text="3 —É—á–∞—Å—Ç–∏—è", callback_data="max_contests_3")
    builder.button(text="5 —É—á–∞—Å—Ç–∏–π", callback_data="max_contests_5")
    builder.button(text="10 —É—á–∞—Å—Ç–∏–π", callback_data="max_contests_10")
    builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="max_contests_custom")
    builder.button(text="‚ùå –£–±—Ä–∞—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data="max_contests_remove")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_entry_menu")
    builder.adjust(2, 2, 2, 1, 1, 1)
    
    await callback.message.edit_text(
        "üÜï **–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–∏–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, max=1 ‚Üí —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤)",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data.startswith("max_contests_"))
async def process_max_contests(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º—É–º–∞ —É—á–∞—Å—Ç–∏–π"""
    value = callback.data.replace("max_contests_", "")
    
    data = await state.get_data()
    entry_conditions = data.get('entry_conditions', {})
    
    if value == "custom":
        await callback.message.edit_text(
            "üÜï –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π (–æ—Ç 0 –¥–æ 100):"
        )
        await state.set_state(ContestCreation.waiting_for_max_contests)
        await callback.answer()
        return
    elif value == "remove":
        if 'max_contests' in entry_conditions:
            del entry_conditions['max_contests']
        await state.update_data(entry_conditions=entry_conditions)
        await callback.answer("‚úÖ –£—Å–ª–æ–≤–∏–µ —É–±—Ä–∞–Ω–æ")
    else:
        count = int(value)
        entry_conditions['max_contests'] = count
        await state.update_data(entry_conditions=entry_conditions)
        
        if count == 0:
            await callback.answer("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —Å–æ–≤—Å–µ–º –Ω–æ–≤–∏—á–∫–∏ (0 —É—á–∞—Å—Ç–∏–π)")
        elif count == 1:
            await callback.answer("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–∫–∏ (0-1 —É—á–∞—Å—Ç–∏–µ)")
        else:
            await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –º–∞–∫—Å–∏–º—É–º {count} —É—á–∞—Å—Ç–∏–π")
    
    await show_entry_conditions_menu(callback.message, state)


@router.message(ContestCreation.waiting_for_max_contests)
async def process_max_contests_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ —É—á–∞—Å—Ç–∏–π"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        count = int(message.text)
        if count < 0 or count > 100:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        entry_conditions = data.get('entry_conditions', {})
        entry_conditions['max_contests'] = count
        await state.update_data(entry_conditions=entry_conditions)
        
        if count == 0:
            await message.answer("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —Å–æ–≤—Å–µ–º –Ω–æ–≤–∏—á–∫–∏ (0 —É—á–∞—Å—Ç–∏–π)")
        elif count == 1:
            await message.answer("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–∫–∏ (0-1 —É—á–∞—Å—Ç–∏–µ)")
        else:
            await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –º–∞–∫—Å–∏–º—É–º {count} —É—á–∞—Å—Ç–∏–π")
        
        await show_entry_conditions_menu(message, state)
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data == "back_to_entry_menu")
async def back_to_entry_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ª–æ–≤–∏–π"""
    await show_entry_conditions_menu(callback.message, state)
    await callback.answer()


@router.callback_query(ContestCreation.configuring_entry_conditions, F.data == "entry_conditions_done")
async def entry_conditions_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è"""
    data = await state.get_data()
    entry_conditions = data.get('entry_conditions', {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if not entry_conditions or 'first_n' not in entry_conditions:
        await callback.answer(
            "‚ö†Ô∏è –ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
            show_alert=True
        )
        return
    
    # –†–∞–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∞–π–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    contest_type = data.get('contest_type', 'voting_contest')
    
    builder = InlineKeyboardBuilder()
    
    if contest_type == "voting_contest":
        # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–µ—Ä
        text = "‚è∞ **–®–∞–≥ 5/5:** –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"
        builder.button(text="5 –º–∏–Ω—É—Ç (—Ç–µ—Å—Ç)", callback_data="timer_5")
        builder.button(text="30 –º–∏–Ω—É—Ç", callback_data="timer_30")
        builder.button(text="1 —á–∞—Å", callback_data="timer_60")
        builder.button(text="2 —á–∞—Å–∞", callback_data="timer_120")
        builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="timer_custom")
        builder.adjust(2, 2, 1)
    
    elif contest_type == "random_contest":
        # –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä: –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        text = "‚è∞ **–®–∞–≥ 5/5:** –í—Ä–µ–º—è —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        builder.button(text="5 –º–∏–Ω—É—Ç (—Ç–µ—Å—Ç)", callback_data="timer_5")
        builder.button(text="30 –º–∏–Ω—É—Ç", callback_data="timer_30")
        builder.button(text="1 —á–∞—Å", callback_data="timer_60")
        builder.button(text="6 —á–∞—Å–æ–≤", callback_data="timer_360")
        builder.button(text="24 —á–∞—Å–∞", callback_data="timer_1440")
        builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="timer_custom")
        builder.adjust(2, 2, 2, 1)
    
    elif contest_type == "spam_contest":
        # –°–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å: —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (–ø–µ—Ä–≤—ã–π —Ç–∞–π–º–µ—Ä)
        # –í—Ç–æ—Ä–æ–π —Ç–∞–π–º–µ—Ä (–∫–æ–Ω–∫—É—Ä—Å) —Å–ø—Ä–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        text = "‚è∞ **–®–∞–≥ 5–∞/6:** –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        builder.button(text="5 –º–∏–Ω—É—Ç (—Ç–µ—Å—Ç)", callback_data="timer_5")
        builder.button(text="10 –º–∏–Ω—É—Ç", callback_data="timer_10")
        builder.button(text="30 –º–∏–Ω—É—Ç", callback_data="timer_30")
        builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="timer_custom")
        builder.adjust(3, 1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(ContestCreation.waiting_for_timer)
    await callback.answer()


@router.callback_query(ContestCreation.waiting_for_timer, F.data.startswith("timer_"))
async def process_timer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–µ—Ä–∞"""
    value = callback.data.replace("timer_", "")
    
    if value == "custom":
        await callback.message.edit_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 300):"
        )
        await callback.answer()
        return
    
    timer_minutes = int(value)
    data = await state.get_data()
    contest_type = data.get('contest_type', 'voting_contest')
    
    # –î–ª—è —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –Ω—É–∂–µ–Ω –í–¢–û–†–û–ô —Ç–∞–π–º–µ—Ä
    if contest_type == "spam_contest":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞–π–º–µ—Ä (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        await state.update_data(registration_time=timer_minutes)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ç–∞–π–º–µ—Ä (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞)
        builder = InlineKeyboardBuilder()
        builder.button(text="5 –º–∏–Ω—É—Ç (—Ç–µ—Å—Ç)", callback_data="contest_timer_5")
        builder.button(text="30 –º–∏–Ω—É—Ç", callback_data="contest_timer_30")
        builder.button(text="1 —á–∞—Å", callback_data="contest_timer_60")
        builder.button(text="2 —á–∞—Å–∞", callback_data="contest_timer_120")
        builder.button(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="contest_timer_custom")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            "‚è∞ **–®–∞–≥ 5–±/6:** –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–º–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    await finalize_contest(callback.message, state, timer_minutes)
    await callback.answer()

@router.callback_query(ContestCreation.waiting_for_timer, F.data.startswith("contest_timer_"))
async def process_contest_timer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞"""
    value = callback.data.replace("contest_timer_", "")
    
    if value == "custom":
        await callback.message.edit_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 300):"
        )
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ custom —Ç–∞–π–º–µ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
        await state.update_data(waiting_contest_timer=True)
        await callback.answer()
        return
    
    contest_timer = int(value)
    await finalize_contest(callback.message, state, contest_timer)
    await callback.answer()


@router.message(ContestCreation.waiting_for_timer)
async def process_timer_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        timer = int(message.text)
        if timer < 5 or timer > 300:
            await message.answer("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 300 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await finalize_contest(message, state, timer)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 300:")


async def finalize_contest(message: Message, state: FSMContext, timer_minutes: int):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    data = await state.get_data()
    await state.clear()
    
    entry_conditions = data.get('entry_conditions', {})
    contest_type = data.get("contest_type", "voting_contest")
    
    # –î–ª—è —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º registration_time –∫–∞–∫ timer_minutes –≤ –ë–î
    # –ê timer_minutes (–ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏) - —ç—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞
    if contest_type == "spam_contest":
        registration_time = data.get('registration_time', 10)
        contest_duration = timer_minutes
        
        # –í –ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ–º registration_time –∫–∞–∫ timer_minutes
        # –ê contest_duration –ø–µ—Ä–µ–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        timer_to_save = registration_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ entry_conditions (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        entry_conditions['contest_duration'] = contest_duration
    else:
        timer_to_save = timer_minutes
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–∫—É—Ä—Å –≤ –ë–î
    contest_id = await db.create_contest(
        prize=data["prize"],
        conditions=data["conditions"],
        entry_conditions=entry_conditions,
        participants_count=entry_conditions.get('first_n', 10),
        timer_minutes=timer_to_save,
        contest_type=contest_type
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    conditions_display = ParticipantFilter.format_conditions(entry_conditions)
    
    # –†–∞–∑–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if contest_type == "voting_contest":
        confirm_text = (
            f"‚úÖ **–ì–æ–ª–æ—Å–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üéÅ –ü—Ä–∏–∑: {data['prize']}\n"
            f"üìù –£—Å–ª–æ–≤–∏—è: {data['conditions']}\n\n"
            f"**–§–∏–ª—å—Ç—Ä—ã —É—á–∞—Å—Ç–∏—è:**\n{conditions_display}\n\n"
            f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {timer_minutes} –º–∏–Ω\n\n"
            f"üöÄ –ü—É–±–ª–∏–∫—É—é –∞–Ω–æ–Ω—Å –≤ –∫–∞–Ω–∞–ª–µ..."
        )
    elif contest_type == "random_contest":
        confirm_text = (
            f"‚úÖ **–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üéÅ –ü—Ä–∏–∑: {data['prize']}\n"
            f"üìù –£—Å–ª–æ–≤–∏—è: {data['conditions']}\n\n"
            f"**–§–∏–ª—å—Ç—Ä—ã —É—á–∞—Å—Ç–∏—è:**\n{conditions_display}\n\n"
            f"‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞: {timer_minutes} –º–∏–Ω\n"
            f"üé≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ—Å–ª–µ –Ω–∞–±–æ—Ä–∞\n\n"
            f"üöÄ –ü—É–±–ª–∏–∫—É—é –∞–Ω–æ–Ω—Å –≤ –∫–∞–Ω–∞–ª–µ..."
        )
    elif contest_type == "spam_contest":
        confirm_text = (
            f"‚úÖ **–°–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üéÅ –ü—Ä–∏–∑: {data['prize']}\n"
            f"üìù –£—Å–ª–æ–≤–∏—è: {data['conditions']}\n\n"
            f"**–§–∏–ª—å—Ç—Ä—ã —É—á–∞—Å—Ç–∏—è:**\n{conditions_display}\n\n"
            f"‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_time} –º–∏–Ω\n"
            f"‚ö° –ö–æ–Ω–∫—É—Ä—Å: {contest_duration} –º–∏–Ω\n"
            f"üí¨ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å = –∫—Ç–æ –±–æ–ª—å—à–µ –Ω–∞–ø–∏—Å–∞–ª\n\n"
            f"üöÄ –ü—É–±–ª–∏–∫—É—é –∞–Ω–æ–Ω—Å –≤ –∫–∞–Ω–∞–ª–µ..."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(confirm_text, parse_mode="Markdown")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if contest_type == "voting_contest":
        from handlers.contests.voting_contest import publish_contest_announcement
        await publish_contest_announcement(message.bot, contest_id)
    
    elif contest_type == "random_contest":
        from handlers.contests.random_contest import publish_random_contest_announcement
        await publish_random_contest_announcement(message.bot, contest_id)
    
    elif contest_type == "spam_contest":
        from handlers.contests.spam_contest import publish_spam_contest_announcement
        await publish_spam_contest_announcement(message.bot, contest_id)

@router.callback_query(F.data.startswith("force_start_"))
async def force_start_contest(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ (–∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞–±–æ—Ä–∞)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_id = int(callback.data.replace("force_start_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
    contest = await db.get_contest_by_id(contest_id)
    
    if not contest:
        await callback.answer("‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if contest['status'] != 'collecting':
        await callback.answer("‚ÑπÔ∏è –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'collecting'", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ
    participants_count = await db.get_participants_count(contest_id)
    
    if participants_count == 0:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!", show_alert=True)
        return
    
    # ‚ö° –í–ê–ñ–ù–û: –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    from handlers.contests.voting_contest import cancel_collect_task, publish_participants_list, start_timer, active_tasks
    await cancel_collect_task(contest_id)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞–±–æ—Ä - –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'voting'
    await db.update_contest_status(contest_id, 'voting')
    print(f"üîí [{contest_id}] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await publish_participants_list(callback.bot, contest_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
    import asyncio
    task = asyncio.create_task(start_timer(callback.bot, contest_id, contest['timer_minutes']))
    active_tasks[f"timer_{contest_id}"] = task
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    text = (
        "‚úÖ **–ö–û–ù–ö–£–†–° –ó–ê–ü–£–©–ï–ù –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û**\n\n"
        f"üÜî ID: {contest_id}\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}/{contest['participants_count']}\n"
        "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.\n"
        "–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()
