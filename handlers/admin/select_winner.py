"""
–í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
–ö–æ–º–∞–Ω–¥–∞ /win {–Ω–æ–º–µ—Ä} –∏–ª–∏ /win {–Ω–æ–º–µ—Ä1} {–Ω–æ–º–µ—Ä2} ...
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import config
from database_postgres import db


router = Router()


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown"""
    if not text:
        return text
    chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in chars:
        text = text.replace(char, '\\' + char)
    return text


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_ID


@router.message(Command("win"))
async def select_winner(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: /win 5 –∏–ª–∏ /win 3 5 7"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/win {–Ω–æ–º–µ—Ä}` ‚Äî –æ–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å\n"
                "`/win {–Ω–æ–º–µ—Ä1} {–Ω–æ–º–µ—Ä2}` ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/win 3` –∏–ª–∏ `/win 3 5`",
                parse_mode="Markdown"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
        positions = []
        for part in parts[1:]:
            try:
                pos = int(part)
                if pos not in positions:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    positions.append(pos)
            except ValueError:
                await message.answer(f"‚ùå '{part}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!")
                return
        
        if not positions:
            await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å
        contest = await db.get_last_ended_contest()
        
        if not contest:
            await message.answer("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤!")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = []
        for position in positions:
            winner = await db.get_participant_by_position(contest['id'], position)
            
            if not winner:
                await message.answer(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {position} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            winners.append(winner)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –ë–î
        for winner in winners:
            await db.set_contest_winner(contest['id'], winner['user_id'])
            print(f"üíæ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: user_id={winner['user_id']}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–±–µ–¥
            await db.increment_user_wins(winner['user_id'], contest['contest_type'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            from handlers.user.achievements import check_achievements
            await check_achievements(message.bot, winner['user_id'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º/–ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        if len(winners) == 1:
            # –û–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            winner = winners[0]
            emoji = winner['comment_text']
            position = positions[0]
            
            text = "üèÜ **–ö–û–ù–ö–£–†–° –ó–ê–í–ï–†–®–Å–ù!**\n\n"
            text += f"üéä **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {position} {emoji} [{escape_markdown(winner['full_name'])}](tg://user?id={winner['user_id']})\n\n"
            text += f"üéÅ **–ü—Ä–∏–∑:** {escape_markdown(contest['prize'])}\n\n"
            text += "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üéâ"
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            text = "üèÜ **–ö–û–ù–ö–£–†–° –ó–ê–í–ï–†–®–Å–ù!**\n\n"
            text += f"üéÅ **–ü—Ä–∏–∑:** {escape_markdown(contest['prize'])}\n\n"
            text += "üéä **–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n"
            
            for i, winner in enumerate(winners):
                emoji = winner['comment_text']
                position = positions[i]
                text += f"{position} {emoji} [{escape_markdown(winner['full_name'])}](tg://user?id={winner['user_id']})\n"
            
            text += "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéâ"
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await message.bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="Markdown"
        )
        
        if len(winners) == 1:
            await message.answer("‚úÖ –ü–æ—Å—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            await message.answer(f"‚úÖ –ü–æ—Å—Ç —Å {len(winners)} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: `/win 3` –∏–ª–∏ `/win 3 5`", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc()