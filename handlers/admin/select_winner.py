"""
–í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
–ö–æ–º–∞–Ω–¥–∞ /win {–Ω–æ–º–µ—Ä}
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import config
from database_postgres import db


router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_ID


@router.message(Command("win"))
async def select_winner(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: /win 5"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/win {–Ω–æ–º–µ—Ä_—É—á–∞—Å—Ç–Ω–∏–∫–∞}`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/win 3`",
                parse_mode="Markdown"
            )
            return
        
        position = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å
        contest = await db.get_last_ended_contest()
        
        if not contest:
            await message.answer("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
        winner = await db.get_participant_by_position(contest['id'], position)
        
        if not winner:
            await message.answer(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {position} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –ë–î
        await db.set_contest_winner(contest['id'], winner['user_id'])
        print(f"üíæ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: user_id={winner['user_id']}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–±–µ–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        await db.increment_user_wins(winner['user_id'], contest['contest_type'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–±–µ–¥—É
        from handlers.user.achievements import check_achievements
        await check_achievements(message.bot, winner['user_id'])
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
        emoji = winner['comment_text']
        text = "üèÜ **–ö–û–ù–ö–£–†–° –ó–ê–í–ï–†–®–Å–ù!**\n\n"
        text += f"üéä **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {position} {emoji} [{winner['full_name']}](tg://user?id={winner['user_id']})\n\n"
        text += f"üéÅ **–ü—Ä–∏–∑:** {contest['prize']}\n\n"
        text += "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üéâ"
        
        await message.bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="Markdown"
        )
        
        await message.answer("‚úÖ –ü–æ—Å—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: `/win 3`", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
