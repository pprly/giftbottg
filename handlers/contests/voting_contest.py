"""
–ì–æ–ª–æ—Å–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å (Voting Contest)
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–∞–π–º–µ—Ä, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
–ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç–º–µ–Ω–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
"""

import asyncio
import random
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message
import config
from database_postgres import db
from utils.filters import ParticipantFilter
from utils.formatters import format_time_left, format_participant_list


router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
active_tasks = {}


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown"""
    if not text:
        return text
    chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in chars:
        text = text.replace(char, '\\' + char)
    return text


async def publish_contest_announcement(bot: Bot, contest_id: int):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–æ–Ω—Å–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    contest = await db.get_contest_by_id(contest_id)
    if not contest:
        print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
    entry_conditions = contest.get('entry_conditions', {})
    conditions_text = ParticipantFilter.format_conditions(entry_conditions)
    
    text = (
        f"üéâ **–ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ù–ö–£–†–°!**\n\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n\n"
        f"üìù **–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:**\n"
        f"{contest['conditions']}\n\n"
        f"**–§–∏–ª—å—Ç—Ä—ã:**\n"
        f"{conditions_text}\n\n"
        f"‚è∞ –ü–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å!"
    )
    
    try:
        message = await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="Markdown"
        )
        
        await db.set_announcement_message(contest_id, message.message_id)
        
        print(f"‚úÖ –ê–Ω–æ–Ω—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! Message ID: {message.message_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
        task = asyncio.create_task(collect_comments(bot, contest_id))
        active_tasks[f"collect_{contest_id}"] = task
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–æ–Ω—Å–∞: {e}")


async def collect_comments(bot: Bot, contest_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    task_key = f"collect_{contest_id}"
    
    try:
        contest = await db.get_contest_by_id(contest_id)
        if not contest:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return
        
        print(f"üîÑ –ù–∞—á–∞—Ç —Å–±–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {contest_id}")
        
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if task_key not in active_tasks:
                print(f"‚õî –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {contest_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            
            try:
                current_count = await db.get_participants_count(contest_id)
                needed_count = contest['participants_count']
                
                print(f"üìä [{contest_id}] –°–æ–±—Ä–∞–Ω–æ {current_count}/{needed_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                
                if current_count >= needed_count:
                    print(f"‚úÖ [{contest_id}] –°–æ–±—Ä–∞–Ω–æ {current_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
                    
                    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'voting'
                    await db.update_contest_status(contest_id, 'voting')
                    print(f"üîÑ [{contest_id}] –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 'voting'")
                    
                    await publish_participants_list(bot, contest_id)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
                    timer_task = asyncio.create_task(start_timer(bot, contest_id, contest['timer_minutes']))
                    active_tasks[f"timer_{contest_id}"] = timer_task
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    if task_key in active_tasks:
                        del active_tasks[task_key]
                    break
                
                await asyncio.sleep(config.COMMENT_CHECK_INTERVAL)
                
            except Exception as e:
                print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
                await asyncio.sleep(5)
    
    except asyncio.CancelledError:
        print(f"‚õî –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {contest_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        if task_key in active_tasks:
            del active_tasks[task_key]
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–±–æ—Ä–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        if task_key in active_tasks:
            del active_tasks[task_key]


async def cancel_collect_task(contest_id: int):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞"""
    task_key = f"collect_{contest_id}"
    
    if task_key in active_tasks:
        task = active_tasks[task_key]
        task.cancel()
        del active_tasks[task_key]
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {contest_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        try:
            await task
        except asyncio.CancelledError:
            pass


async def cancel_timer_task(contest_id: int):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞"""
    task_key = f"timer_{contest_id}"
    
    if task_key in active_tasks:
        task = active_tasks[task_key]
        task.cancel()
        del active_tasks[task_key]
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {contest_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        try:
            await task
        except asyncio.CancelledError:
            pass


async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False



async def publish_participants_list(bot: Bot, contest_id: int):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏"""
    contest = await db.get_contest_by_id(contest_id)
    participants = await db.get_participants(contest_id)
    
    if not participants:
        print(f"‚ùå [{contest_id}] –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return
    
    print(f"üìä [{contest_id}] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    # üóëÔ∏è –£–î–ê–õ–Ø–ï–ú –°–¢–ê–†–û–ï –°–û–û–ë–©–ï–ù–ò–ï-–ê–ù–û–ù–°
    old_announcement_id = contest.get('announcement_message_id')
    if old_announcement_id:
        try:
            await bot.delete_message(
                chat_id=config.CHANNEL_ID,
                message_id=old_announcement_id
            )
            print(f"üóëÔ∏è [{contest_id}] –°—Ç–∞—Ä—ã–π –∞–Ω–æ–Ω—Å —É–¥–∞–ª—ë–Ω (ID: {old_announcement_id})")
        except Exception as e:
            print(f"‚ö†Ô∏è [{contest_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–æ–Ω—Å: {e}")
    
    # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    text = f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
    text += "\nüë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
    text += format_participant_list(participants, include_blockquote=True)
    text += f"\n\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å {contest['timer_minutes']} –º–∏–Ω—É—Ç"
    text += f'\n\nüí° –ì–æ–ª–æ—Å—É–µ–º –†–µ–∞–∫—Ü–∏—è–º–∏ –≤ <a href="{config.CHANNEL_INVITE_LINK}">–ó–∞–∑–≤–µ–∑–¥–∏–ª—Å—è</a>'
    text += f'\nüì±<a href="{config.BOT_INVITE_LINK}"> –û—Ç–∫—Ä—ã—Ç—å –ë–æ—Ç–∞</a>'

    try:
        message = await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
        await db.set_announcement_message(contest_id, message.message_id)
        print(f"‚úÖ [{contest_id}] –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. Message ID: {message.message_id}")
        return message.message_id
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        return None

async def start_timer(bot: Bot, contest_id: int, minutes: int):
    """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
    task_key = f"timer_{contest_id}"
    
    try:
        print(f"‚è∞ [{contest_id}] –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç")
        
        contest = await db.get_contest_by_id(contest_id)
        message_id = contest['announcement_message_id']
        participants = await db.get_participants(contest_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        for remaining in range(minutes, -1, -1):  # minutes, minutes-1, ..., 1, 0
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if task_key not in active_tasks:
                print(f"‚õî [{contest_id}] –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω")
                break
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
            if remaining > 0:
                # –ï—â—ë –µ—Å—Ç—å –≤—Ä–µ–º—è
                text = f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
                text += "\nüë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
                text += format_participant_list(participants, include_blockquote=True)
                text += f"\n\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å {format_time_left(remaining)}"
                text += f'\n\nüí° –ì–æ–ª–æ—Å—É–µ–º –†–µ–∞–∫—Ü–∏—è–º–∏ –≤ <a href="{config.CHANNEL_INVITE_LINK}">–ó–∞–∑–≤–µ–∑–¥–∏–ª—Å—è</a>'
                text += f'\nüì±<a href="{config.BOT_INVITE_LINK}"> –û—Ç–∫—Ä—ã—Ç—å –ë–æ—Ç–∞</a>'
            else:
                # –í—Ä–µ–º—è –≤—ã—à–ª–æ (remaining = 0)
                text = f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
                text += "\nüë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
                text += format_participant_list(participants, include_blockquote=True)
                text += "\n\n‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
                text += f'\n\nüí° –ì–æ–ª–æ—Å—É–µ–º –†–µ–∞–∫—Ü–∏—è–º–∏ –≤ <a href="{config.CHANNEL_INVITE_LINK}">–ó–∞–∑–≤–µ–∑–¥–∏–ª—Å—è</a>'
                text += f'\nüì±<a href="{config.BOT_INVITE_LINK}"> –û—Ç–∫—Ä—ã—Ç—å –ë–æ—Ç–∞</a>'
            try:
                await bot.edit_message_text(
                    chat_id=config.CHANNEL_ID,
                    message_id=message_id,
                    text=text,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                
                if remaining > 0:
                    print(f"‚è∞ [{contest_id}] –û–±–Ω–æ–≤–ª—ë–Ω —Ç–∞–π–º–µ—Ä: –æ—Å—Ç–∞–ª–æ—Å—å {format_time_left(remaining)}")
                else:
                    print(f"‚è≥ [{contest_id}] –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
            except Exception as e:
                print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –≤—ã—à–ª–æ - –∂–¥—ë–º –º–∏–Ω—É—Ç—É
            if remaining > 0:
                await asyncio.sleep(60)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
        await end_contest(bot, contest_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if task_key in active_tasks:
            del active_tasks[task_key]
    
    except asyncio.CancelledError:
        print(f"‚õî [{contest_id}] –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω")
        if task_key in active_tasks:
            del active_tasks[task_key]
    except Exception as e:
        print(f"‚ùå [{contest_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
        if task_key in active_tasks:
            del active_tasks[task_key]


async def end_contest(bot: Bot, contest_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–¥–º–∏–Ω—É"""
    await db.update_contest_status(contest_id, 'ended')
    
    participants = await db.get_participants(contest_id)
    contest = await db.get_contest_by_id(contest_id)
    
    print(f"üèÅ [{contest_id}] –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω")
    
    if not participants:
        await bot.send_message(
            chat_id=config.ADMIN_ID,
            text=f"‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä—Å #{contest_id} –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
    text = f"üèÅ **–ö–æ–Ω–∫—É—Ä—Å #{contest_id} –∑–∞–≤–µ—Ä—à—ë–Ω!**\n"
    text += f"üéÅ –ü—Ä–∏–∑: {escape_markdown(contest['prize'])}\n"
    text += "üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n"
    
    for p in participants:
        emoji = p['comment_text']
        username = f"@{p['username']}" if p['username'] != "noname" else p['full_name']
        # –≠–ö–†–ê–ù–ò–†–£–ï–ú –ò–ú–Ø
        safe_username = escape_markdown(username)
        text += f"{p['position']} {emoji} ‚Äî {safe_username}\n"
    
    text += "\n\n**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:**\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/win {–Ω–æ–º–µ—Ä}`\n\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: `/win 3` (–µ—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ3)"
    
    try:
        await bot.send_message(
            chat_id=config.ADMIN_ID,
            text=text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        print(f"‚úÖ [{contest_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É")
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

        