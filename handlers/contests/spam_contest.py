"""
–°–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å (Spam Contest)
–î–≤–∞ —Ç–∞–π–º–µ—Ä–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –∫–æ–Ω–∫—É—Ä—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å = –∫—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import random
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message
import config
from database_postgres import db
from utils.filters import ParticipantFilter


router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
from handlers.contests.voting_contest import active_tasks


async def publish_spam_contest_announcement(bot: Bot, contest_id: int):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–æ–Ω—Å–∞ —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    contest = await db.get_contest_by_id(contest_id)
    if not contest:
        print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
    entry_conditions = contest.get('entry_conditions', {})
    conditions_text = ParticipantFilter.format_conditions(entry_conditions)
    
    # –ù–∞–º –Ω—É–∂–Ω—ã –î–í–ê —Ç–∞–π–º–µ—Ä–∞ - –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∫–∞–∫:
    # participants_count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    # timer_minutes - –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–π —Ç–∞–π–º–µ—Ä)
    # –í—Ç–æ—Ä–æ–π —Ç–∞–π–º–µ—Ä –º—ã –∑–∞–ø—Ä–æ—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ contest
    
    text = (
        f"‚ö° **–°–ü–ê–ú-–ö–û–ù–ö–£–†–°!**\n\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n\n"
        f"üìù **–£—Å–ª–æ–≤–∏—è:**\n"
        f"{contest['conditions']}\n\n"
        f"**–§–∏–ª—å—Ç—Ä—ã:**\n"
        f"{conditions_text}\n\n"
        f"üí¨ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –±–∞–ª–ª\n\n"
        f"‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {contest['timer_minutes']} –º–∏–Ω\n"
        f"–ü–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å!"
    )
    
    try:
        message = await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="Markdown"
        )
        
        await db.set_announcement_message(contest_id, message.message_id)
        
        print(f"‚úÖ [{contest_id}] –ê–Ω–æ–Ω—Å —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! Message ID: {message.message_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
        task = asyncio.create_task(collect_spam_participants(bot, contest_id))
        active_tasks[f"collect_{contest_id}"] = task
        
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–æ–Ω—Å–∞: {e}")


async def collect_spam_participants(bot: Bot, contest_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ (–¢–ê–ô–ú–ï–† 1)"""
    task_key = f"collect_{contest_id}"
    
    try:
        contest = await db.get_contest_by_id(contest_id)
        if not contest:
            print(f"‚ùå [{contest_id}] –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        print(f"üîÑ [{contest_id}] –ù–∞—á–∞—Ç —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞")
        
        # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ò–õ–ò –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        start_time = datetime.now()
        timeout_minutes = contest['timer_minutes']  # –¢–ê–ô–ú–ï–† 1: –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if task_key not in active_tasks:
                print(f"‚õî [{contest_id}] –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            
            try:
                current_count = await db.get_participants_count(contest_id)
                needed_count = contest['participants_count']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–±—Ä–∞–ª–æ—Å—å –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if current_count >= needed_count:
                    print(f"‚úÖ [{contest_id}] –°–æ–±—Ä–∞–Ω–æ {current_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
                    
                    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'running' (–∏–¥—ë—Ç –∫–æ–Ω–∫—É—Ä—Å)
                    await db.update_contest_status(contest_id, 'running')
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–±–æ—Ä–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    if task_key in active_tasks:
                        del active_tasks[task_key]
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å (–¢–ê–ô–ú–ï–† 2)
                    await start_spam_contest(bot, contest_id)
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                elapsed_minutes = (datetime.now() - start_time).total_seconds() / 60
                if elapsed_minutes >= timeout_minutes:
                    print(f"‚è∞ [{contest_id}] –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã—à–ª–æ! –°–æ–±—Ä–∞–Ω–æ {current_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                    
                    if current_count > 0:
                        await db.update_contest_status(contest_id, 'running')
                        
                        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–±–æ—Ä–∞
                        if task_key in active_tasks:
                            del active_tasks[task_key]
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
                        await start_spam_contest(bot, contest_id)
                    else:
                        print(f"‚ùå [{contest_id}] –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ–Ω–∫—É—Ä—Å –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è")
                        await db.update_contest_status(contest_id, 'ended')
                        
                        # –£–¥–∞–ª—è–µ–º –∞–Ω–æ–Ω—Å
                        old_announcement_id = contest.get('announcement_message_id')
                        if old_announcement_id:
                            try:
                                await bot.delete_message(
                                    chat_id=config.CHANNEL_ID,
                                    message_id=old_announcement_id
                                )
                            except:
                                pass
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
                    if task_key in active_tasks:
                        del active_tasks[task_key]
                    break
                
                print(f"üìä [{contest_id}] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {current_count}/{needed_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø—Ä–æ—à–ª–æ {int(elapsed_minutes)} –º–∏–Ω)")
                
                await asyncio.sleep(config.COMMENT_CHECK_INTERVAL)
                
            except Exception as e:
                print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                await asyncio.sleep(5)
    
    except asyncio.CancelledError:
        print(f"‚õî [{contest_id}] –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        if task_key in active_tasks:
            del active_tasks[task_key]
    except Exception as e:
        print(f"‚ùå [{contest_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        if task_key in active_tasks:
            del active_tasks[task_key]


async def start_spam_contest(bot: Bot, contest_id: int):
    """–ù–∞—á–∞–ª–æ —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ (–¢–ê–ô–ú–ï–† 2) - –ø–æ–¥—Å—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
    contest = await db.get_contest_by_id(contest_id)
    participants = await db.get_participants(contest_id)
    
    if not participants:
        print(f"‚ùå [{contest_id}] –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞")
        await db.update_contest_status(contest_id, 'ended')
        return
    
    print(f"‚ö° [{contest_id}] –°–ü–ê–ú-–ö–û–ù–ö–£–†–° –ù–ê–ß–ê–õ–°–Ø! –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ spam_messages
    for participant in participants:
        await db.init_spam_participant(contest_id, participant['user_id'])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–Ω–æ–Ω—Å
    old_announcement_id = contest.get('announcement_message_id')
    if old_announcement_id:
        try:
            await bot.delete_message(
                chat_id=config.CHANNEL_ID,
                message_id=old_announcement_id
            )
            print(f"üóëÔ∏è [{contest_id}] –°—Ç–∞—Ä—ã–π –∞–Ω–æ–Ω—Å —É–¥–∞–ª—ë–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è [{contest_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–æ–Ω—Å: {e}")
    
    # –ü—É–±–ª–∏–∫—É–µ–º live-—Ç–∞–±–ª–∏—Ü—É
    leaderboard_text = await format_spam_leaderboard(contest, participants, contest['timer_minutes'])
    
    try:
        message = await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=leaderboard_text,
            mode="Markdown"
        )
        
        await db.set_announcement_message(contest_id, message.message_id)
        print(f"‚úÖ [{contest_id}] Live-—Ç–∞–±–ª–∏—Ü–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        task = asyncio.create_task(run_spam_timer(bot, contest_id, contest['timer_minutes']))
        active_tasks[f"spam_timer_{contest_id}"] = task
        
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")


async def format_spam_leaderboard(contest: dict, participants: list, minutes_left: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    contest_id = contest['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    leaderboard = await db.get_spam_leaderboard(contest_id)
    
    text = (
        f"‚ö° **–°–ü–ê–ú-–ö–û–ù–ö–£–†–° –ò–î–Å–¢!**\n\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n\n"
        f"üèÜ **–¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í:**\n\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 (–∏–ª–∏ –≤—Å–µ—Ö –µ—Å–ª–∏ –º–µ–Ω—å—à–µ)
    for idx, leader in enumerate(leaderboard[:10], 1):
        emoji = leader.get('comment_text', '‚ùì')
        username = f"@{leader['username']}" if leader['username'] != "noname" else leader['full_name']
        count = leader['spam_count']
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
        if idx == 1 and count > 0:
            medal = "üî•üî•üî•"
        elif idx == 2 and count > 0:
            medal = "üî•üî•"
        elif idx == 3 and count > 0:
            medal = "üî•"
        else:
            medal = ""
        
        text += f"{idx} {emoji} {username} ‚Äî {count} {medal}\n"
    
    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ 10, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ
    if len(leaderboard) > 10:
        text += f"...\n"
    
    text += f"\n\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω\n"
    text += f"üí¨ –ü–∏—à–∏—Ç–µ –±–æ–ª—å—à–µ!\n\n"
    text += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"
    
    return text


async def run_spam_timer(bot: Bot, contest_id: int, duration_minutes: int):
    """–¢–∞–π–º–µ—Ä —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    task_key = f"spam_timer_{contest_id}"
    
    try:
        contest = await db.get_contest_by_id(contest_id)
        message_id = contest['announcement_message_id']
        participants = await db.get_participants(contest_id)
        
        print(f"‚è∞ [{contest_id}] –¢–∞–π–º–µ—Ä —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
        total_iterations = duration_minutes * 2  # 2 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç—É
        
        for iteration in range(total_iterations, -1, -1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if task_key not in active_tasks:
                print(f"‚õî [{contest_id}] –¢–∞–π–º–µ—Ä —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω—ë–Ω")
                break
            
            # –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å
            minutes_left = iteration // 2
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            leaderboard_text = await format_spam_leaderboard(contest, participants, minutes_left)
            
            try:
                await bot.edit_message_text(
                    chat_id=config.CHANNEL_ID,
                    message_id=message_id,
                    text=leaderboard_text,
                    parse_mode="Markdown"
                )
                print(f"üîÑ [{contest_id}] –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω")
            except Exception as e:
                # –ò–Ω–æ–≥–¥–∞ Telegram –Ω–µ –¥–∞—ë—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                pass
            
            # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –∫–æ–Ω–µ—Ü - –∂–¥—ë–º 30 —Å–µ–∫—É–Ω–¥
            if iteration > 0:
                await asyncio.sleep(30)
        
        # –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω
        await finish_spam_contest(bot, contest_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if task_key in active_tasks:
            del active_tasks[task_key]
    
    except asyncio.CancelledError:
        print(f"‚õî [{contest_id}] –¢–∞–π–º–µ—Ä —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω")
        if task_key in active_tasks:
            del active_tasks[task_key]
    except Exception as e:
        print(f"‚ùå [{contest_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
        if task_key in active_tasks:
            del active_tasks[task_key]


async def finish_spam_contest(bot: Bot, contest_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    contest = await db.get_contest_by_id(contest_id)
    winner = await db.get_spam_winner(contest_id)
    leaderboard = await db.get_spam_leaderboard(contest_id)
    
    if not winner:
        print(f"‚ùå [{contest_id}] –ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
        await db.update_contest_status(contest_id, 'ended')
        return
    
    print(f"üèÜ [{contest_id}] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['username']} —Å {winner['spam_count']} —Å–ø–∞–º–∞–º–∏")
    
    # –£–¥–∞–ª—è–µ–º live-—Ç–∞–±–ª–∏—Ü—É
    old_message_id = contest.get('announcement_message_id')
    if old_message_id:
        try:
            await bot.delete_message(
                chat_id=config.CHANNEL_ID,
                message_id=old_message_id
            )
        except:
            pass
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    winner_name = f"@{winner['username']}" if winner['username'] != "noname" else winner['full_name']
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∞–º–æ–≤
    spam_count = winner['spam_count']
    if spam_count % 10 == 1 and spam_count % 100 != 11:
        spam_word = "—Å–ø–∞–º"
    elif spam_count % 10 in [2, 3, 4] and spam_count % 100 not in [12, 13, 14]:
        spam_word = "—Å–ø–∞–º–∞"
    else:
        spam_word = "—Å–ø–∞–º–æ–≤"
    
    text = (
        f"‚ö° **–°–ü–ê–ú-–ö–û–ù–ö–£–†–° –ó–ê–í–ï–†–®–Å–ù!**\n\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(leaderboard)}\n\n"
        f"üèÜ **–ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê:**\n\n"
    )
    
    # –¢–æ–ø-10
    for idx, leader in enumerate(leaderboard[:10], 1):
        emoji = leader['comment_text']
        username = f"@{leader['username']}" if leader['username'] != "noname" else leader['full_name']
        count = leader['spam_count']
        
        # –°–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        if count % 10 == 1 and count % 100 != 11:
            word = "—Å–ø–∞–º"
        elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
            word = "—Å–ø–∞–º–∞"
        else:
            word = "—Å–ø–∞–º–æ–≤"
        
        if idx == 1:
            text += f"{idx} {emoji} {username} ‚Äî {count} {word} üëë\n"
        elif idx == 2:
            text += f"{idx} {emoji} {username} ‚Äî {count} {word} ü•à\n"
        elif idx == 3:
            text += f"{idx} {emoji} {username} ‚Äî {count} {word} ü•â\n"
        else:
            text += f"{idx} {emoji} {username} ‚Äî {count} {word}\n"
    
    text += (
        f"\nüéâ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨:** {winner_name}\n"
        f"üéÅ **–ü—Ä–∏–∑:** {contest['prize']}\n\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ–ª—è —Å–ø–∞–º–∞! üéä"
    )
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="Markdown"
        )
        print(f"‚úÖ [{contest_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    await db.set_contest_winner(contest_id, winner['user_id'])
    await db.increment_user_wins(winner['user_id'], 'spam_contest')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    from handlers.user.achievements import check_achievements
    await check_achievements(bot, winner['user_id'])
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
    await db.update_contest_status(contest_id, 'ended')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    admin_text = (
        f"‚ö° **–°–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å #{contest_id} –∑–∞–≤–µ—Ä—à—ë–Ω!**\n\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(leaderboard)}\n\n"
        f"üèÜ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨:**\n"
        f"{winner['comment_text']} {winner_name} ‚Äî {spam_count} {spam_word}\n"
        f"(ID: {winner['user_id']})\n\n"
        f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"
    )
    
    try:
        await bot.send_message(
            chat_id=config.ADMIN_ID,
            text=admin_text,
            parse_mode="Markdown"
        )
        print(f"‚úÖ [{contest_id}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


