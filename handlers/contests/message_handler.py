"""
–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
–†–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É voting_contest –∏ spam_contest
–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É –∏ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω–∫—É—Ä—Å–∞
"""

import random
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message
import config
from database_postgres import db
from utils.filters import ParticipantFilter
from utils.messages import (
    format_rejection_message,
    get_not_subscribed_error,
    get_previous_winner_error
)

router = Router()


async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False


async def handle_participant_registration(message: Message, contest: dict):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è voting, random –∏ spam (–≤ —Å—Ç–∞—Ç—É—Å–µ collecting)
    """
    print(f"\n      >>> –ù–ê–ß–ê–õ–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –£–ß–ê–°–¢–ù–ò–ö–ê <<<")
    print(f"      –ö–æ–Ω–∫—É—Ä—Å ID: {contest['id']}")
    print(f"      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {message.from_user.id})")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø created_at
        contest_created = contest['created_at']
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
        if isinstance(contest_created, str):
            contest_created = datetime.fromisoformat(contest_created)
        
        # –ï—Å–ª–∏ —É–∂–µ datetime - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        message_date = message.date.replace(tzinfo=None)
        
        print(f"      –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: {contest_created}")
        print(f"      –î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_date}")
        
        if message_date < contest_created:
            print(f"      ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç–∞—Ä—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç @{message.from_user.username}")
            return
        
        print(f"      ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–µ–µ –∫–æ–Ω–∫—É—Ä—Å–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞—é")
    except Exception as e:
        print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞—Ç–æ–π
    
    print(f"      üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text[:50] if message.text else '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞'}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    print(f"      üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª...")
    is_subscribed = await check_subscription(message.bot, message.from_user.id)
    print(f"      {'‚úÖ' if is_subscribed else '‚ùå'} –ü–æ–¥–ø–∏—Å–∫–∞: {is_subscribed}")
    
    if not is_subscribed:
        print(f"      ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
        try:
            await message.reply(
                f'‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n\n'
                f'üëâ <a href="{config.CHANNEL_INVITE_LINK}">–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</a> –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.',
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è (entry_conditions)
    print(f"      üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è...")
    entry_conditions = contest.get('entry_conditions', {})
    print(f"      –£—Å–ª–æ–≤–∏—è: {entry_conditions}")
    
    can_participate, error_data = await ParticipantFilter.check_conditions(
        message.from_user.id, 
        entry_conditions
    )
    
    print(f"      {'‚úÖ' if can_participate else '‚ùå'} –ú–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å: {can_participate}")
    
    if not can_participate:
        error_type, required, current = error_data
        error_message = format_rejection_message(error_type, required, current)
        print(f"      ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä: {error_type} (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {required}, —Ç–µ–∫—É—â–µ–µ: {current})")
        try:
            await message.reply(error_message, parse_mode="Markdown")
        except Exception as e:
            print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
        return
    
    # –ó–∞–ø—Ä–µ—â–∞–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    print(f"      üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ—à–ª—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤...")
    last_winners = await db.get_last_winners_by_type(contest['contest_type'], limit=1)
    print(f"      –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–æ—à–ª—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤: {last_winners}")
    
    if last_winners and message.from_user.id in last_winners:
        print(f"      ‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –±—ã–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ –ø—Ä–æ—à–ª–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ")
        try:
            await message.reply(
                "‚õî –í—ã –±—ã–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ –ø—Ä–æ—à–ª–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞!\n\n"
                "–î–∞–π—Ç–µ —à–∞–Ω—Å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –í—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ. üòä"
            )
        except Exception as e:
            print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
    print(f"      üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    existing_participants = await db.get_participants(contest['id'])
    print(f"      –¢–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(existing_participants)}")
    
    used_emojis = [p['comment_text'] for p in existing_participants]
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
    available_emojis = [e for e in config.PARTICIPANT_EMOJIS if e not in used_emojis]
    
    if not available_emojis:
        print(f"      ‚ö†Ô∏è –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏!")
        random_emoji = random.choice(config.PARTICIPANT_EMOJIS)
    else:
        random_emoji = random.choice(available_emojis)
    
    print(f"      üé≤ –í—ã–±—Ä–∞–Ω —ç–º–æ–¥–∑–∏: {random_emoji}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø–æ–∑–∏—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ë–î)
    print(f"      üíæ –î–æ–±–∞–≤–ª—è—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î...")
    try:
        added = await db.add_participant(
            contest_id=contest['id'],
            user_id=message.from_user.id,
            username=message.from_user.username or "noname",
            full_name=message.from_user.full_name,
            emoji=random_emoji
        )
        
        print(f"      {'‚úÖ' if added else '‚ö†Ô∏è'} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {added}")
        
        if added:
            count = await db.get_participants_count(contest['id'])
            print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω! –≠–º–æ–¥–∑–∏: {random_emoji} –í—Å–µ–≥–æ: {count}/{contest['participants_count']}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —É—á–∞—Å—Ç–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            print(f"      üìä –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            await db.increment_user_contests(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—á–∞—Å—Ç–∏–µ
            print(f"      üèÜ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")
            from handlers.user.achievements import check_achievements
            await check_achievements(message.bot, message.from_user.id)
            
            # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if count >= contest['participants_count']:
                print(f"      üîí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞! –ù–∞–±—Ä–∞–Ω–æ {count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                await db.update_contest_status(contest['id'], 'voting')
        else:
            print(f"      ‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
    except Exception as e:
        print(f"      ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print(f"      >>> –ö–û–ù–ï–¶ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –£–ß–ê–°–¢–ù–ò–ö–ê <<<\n")


async def handle_spam_counting(message: Message, contest: dict):
    """
    –ü–æ–¥—Å—á—ë—Ç —Å–ø–∞–º–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ spam_contest –≤ —Å—Ç–∞—Ç—É—Å–µ 'running'
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —é–∑–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    participants = await db.get_participants(contest['id'])
    participant_ids = [p['user_id'] for p in participants]
    
    if message.from_user.id in participant_ids:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        await db.increment_spam_count(contest['id'], message.from_user.id)
        print(f"üí¨ [{contest['id']}] +1 —Å–ø–∞–º –¥–ª—è @{message.from_user.username}")


@router.message(F.chat.id == config.DISCUSSION_GROUP_ID)
async def handle_discussion_message(message: Message):
    """
    –ï–î–ò–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ —Ç–∏–ø—É –∏ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω–∫—É—Ä—Å–∞
    """
    print("\n" + "="*60)
    print("üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –í –ì–†–£–ü–ü–ï –û–ë–°–£–ñ–î–ï–ù–ò–ô")
    print("="*60)
    print(f"   –û—Ç: @{message.from_user.username} (ID: {message.from_user.id})")
    print(f"   –¢–µ–∫—Å—Ç: {message.text[:50] if message.text else '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞'}...")
    print(f"   Chat ID: {message.chat.id}")
    print(f"   Message ID: {message.message_id}")
    print(f"   –î–∞—Ç–∞: {message.date}")
    print("="*60)
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    if message.from_user.id == config.BOT_ID:
        print("   ‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        print("   ‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã
    contests = await db.get_active_contests()
    
    print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤: {len(contests)}")
    
    if not contests:
        print("   ‚è≠Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å
    for contest in contests:
        contest_type = contest['contest_type']
        status = contest['status']
        
        print(f"\n   üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω–∫—É—Ä—Å #{contest['id']}")
        print(f"      –¢–∏–ø: {contest_type}")
        print(f"      –°—Ç–∞—Ç—É—Å: {status}")
        print(f"      –°–æ–∑–¥–∞–Ω: {contest['created_at']}")
        
        # ============================================================
        # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ collecting)
        # ============================================================
        if status == 'collecting':
            print(f"      ‚úÖ –ö–æ–Ω–∫—É—Ä—Å –≤ —Å—Ç–∞—Ç—É—Å–µ 'collecting' - –Ω–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            # –í—Å–µ —Ç–∏–ø—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if contest_type in ['voting_contest', 'random_contest', 'spam_contest']:
                await handle_participant_registration(message, contest)
            else:
                print(f"      ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω–∫—É—Ä—Å–∞: {contest_type}")
        else:
            print(f"      ‚è≠Ô∏è –ö–æ–Ω–∫—É—Ä—Å –ù–ï –≤ —Å—Ç–∞—Ç—É—Å–µ 'collecting' (—Ç–µ–∫—É—â–∏–π: {status})")
        
        # ============================================================
        # –ü–û–î–°–ß–Å–¢ –°–ü–ê–ú–û–í (—Ç–æ–ª—å–∫–æ –¥–ª—è spam_contest –≤ —Å—Ç–∞—Ç—É—Å–µ running)
        # ============================================================
        if contest_type == 'spam_contest' and status == 'running':
            print(f"      ‚úÖ –°–ø–∞–º-–∫–æ–Ω–∫—É—Ä—Å –≤ —Ä–µ–∂–∏–º–µ 'running' - –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é —Å–ø–∞–º")
            await handle_spam_counting(message, contest)
    
    print("="*60 + "\n")