"""
–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –∫–æ–Ω–∫—É—Ä—Å (Random Contest)
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
"""

import asyncio
import random
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message
import config
from database_postgres import db
from utils.filters import ParticipantFilter
from utils.formatters import format_participant_list


router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∏–∑ voting_contest)
from handlers.contests.voting_contest import active_tasks


async def publish_random_contest_announcement(bot: Bot, contest_id: int):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–æ–Ω—Å–∞ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    contest = await db.get_contest_by_id(contest_id)
    if not contest:
        print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
    entry_conditions = contest.get('entry_conditions', {})
    conditions_text = ParticipantFilter.format_conditions(entry_conditions)
    
    text = (
        f"üé∞ **–†–ê–ù–î–û–ú–ê–ô–ó–ï–†!**\n\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n\n"
        f"üìù **–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:**\n"
        f"{contest['conditions']}\n\n"
        f"**–§–∏–ª—å—Ç—Ä—ã:**\n"
        f"{conditions_text}\n\n"
        f"‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞: {contest['timer_minutes']} –º–∏–Ω\n"
        f"üé≤ –ü–æ—Å–ª–µ –Ω–∞–±–æ—Ä–∞ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à!"
    )
    
    try:
        message = await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="Markdown"
        )
        
        await db.set_announcement_message(contest_id, message.message_id)
        
        print(f"‚úÖ [{contest_id}] –ê–Ω–æ–Ω—Å —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! Message ID: {message.message_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
        task = asyncio.create_task(collect_random_participants(bot, contest_id))
        active_tasks[f"collect_{contest_id}"] = task
        
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–æ–Ω—Å–∞: {e}")


async def collect_random_participants(bot: Bot, contest_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞"""
    task_key = f"collect_{contest_id}"
    
    try:
        contest = await db.get_contest_by_id(contest_id)
        if not contest:
            print(f"‚ùå [{contest_id}] –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        print(f"üîÑ [{contest_id}] –ù–∞—á–∞—Ç —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞")
        
        # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ò–õ–ò –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        start_time = datetime.now()
        timeout_minutes = contest['timer_minutes']
        
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if task_key not in active_tasks:
                print(f"‚õî [{contest_id}] –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            
            try:
                current_count = await db.get_participants_count(contest_id)
                needed_count = contest['participants_count']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–±—Ä–∞–ª–æ—Å—å –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if current_count >= needed_count:
                    print(f"‚úÖ [{contest_id}] –°–æ–±—Ä–∞–Ω–æ {current_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
                    await db.update_contest_status(contest_id, 'voting')
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
                    await select_random_winner(bot, contest_id)
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    if task_key in active_tasks:
                        del active_tasks[task_key]
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
                elapsed_minutes = (datetime.now() - start_time).total_seconds() / 60
                if elapsed_minutes >= timeout_minutes:
                    print(f"‚è∞ [{contest_id}] –í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–æ–±—Ä–∞–Ω–æ {current_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                    
                    if current_count > 0:
                        await db.update_contest_status(contest_id, 'voting')
                        await select_random_winner(bot, contest_id)
                    else:
                        print(f"‚ùå [{contest_id}] –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ–Ω–∫—É—Ä—Å –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è")
                        await db.update_contest_status(contest_id, 'ended')
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    if task_key in active_tasks:
                        del active_tasks[task_key]
                    break
                
                print(f"üìä [{contest_id}] –°–æ–±—Ä–∞–Ω–æ {current_count}/{needed_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø—Ä–æ—à–ª–æ {int(elapsed_minutes)} –º–∏–Ω)")
                
                await asyncio.sleep(config.COMMENT_CHECK_INTERVAL)
                
            except Exception as e:
                print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                await asyncio.sleep(5)
    
    except asyncio.CancelledError:
        print(f"‚õî [{contest_id}] –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        if task_key in active_tasks:
            del active_tasks[task_key]
    except Exception as e:
        print(f"‚ùå [{contest_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        if task_key in active_tasks:
            del active_tasks[task_key]


async def select_random_winner(bot: Bot, contest_id: int):
    """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    contest = await db.get_contest_by_id(contest_id)
    participants = await db.get_participants(contest_id)
    
    if not participants:
        print(f"‚ùå [{contest_id}] –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await db.update_contest_status(contest_id, 'ended')
        return
    
    print(f"üé≤ [{contest_id}] –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    # üé∞ –°–õ–£–ß–ê–ô–ù–´–ô –í–´–ë–û–†
    winner = random.choice(participants)
    
    print(f"üèÜ [{contest_id}] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['position']} {winner['comment_text']} ‚Äî @{winner['username']}")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–Ω–æ–Ω—Å
    old_announcement_id = contest.get('announcement_message_id')
    if old_announcement_id:
        try:
            await bot.delete_message(
                chat_id=config.CHANNEL_ID,
                message_id=old_announcement_id
            )
            print(f"üóëÔ∏è [{contest_id}] –°—Ç–∞—Ä—ã–π –∞–Ω–æ–Ω—Å —É–¥–∞–ª—ë–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è [{contest_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–æ–Ω—Å: {e}")
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª–µ
    winner_name = f"@{winner['username']}" if winner['username'] != "noname" else winner['full_name']
    
    text = (
        f"üé∞ **–†–û–ó–´–ì–†–´–® –ó–ê–í–ï–†–®–Å–ù!**\n\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
        f"üéâ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨:**\n"
        f"{winner['position']} {winner['comment_text']} ‚Äî [{winner_name}](tg://user?id={winner['user_id']})\n\n"
        f"üéÅ **–ü—Ä–∏–∑:** {contest['prize']}\n\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéä"
    )
    
    try:
        await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=text,
            parse_mode="Markdown"
        )
        print(f"‚úÖ [{contest_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –ë–î
    await db.set_contest_winner(contest_id, winner['user_id'])
    await db.increment_user_wins(winner['user_id'], contest['contest_type'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    from handlers.user.achievements import check_achievements
    await check_achievements(bot, winner['user_id'])
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
    await db.update_contest_status(contest_id, 'ended')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    admin_text = (
        f"üé∞ **–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä #{contest_id} –∑–∞–≤–µ—Ä—à—ë–Ω!**\n\n"
        f"üéÅ –ü—Ä–∏–∑: {contest['prize']}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
        f"üèÜ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨:**\n"
        f"{winner['position']} {winner['comment_text']} ‚Äî {winner_name} (ID: {winner['user_id']})\n\n"
        f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"
    )
    
    try:
        await bot.send_message(
            chat_id=config.ADMIN_ID,
            text=admin_text,
            parse_mode="Markdown"
        )
        print(f"‚úÖ [{contest_id}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
    except Exception as e:
        print(f"‚ùå [{contest_id}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
