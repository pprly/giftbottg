"""
–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import config
from database_postgres import db


router = Router()


async def check_achievements(bot: Bot, user_id: int):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (—É—á–∞—Å—Ç–∏–µ, –ø–æ–±–µ–¥–∞, —Ä–µ—Ñ–µ—Ä–∞–ª)
    """
    stats = await db.get_user_stats(user_id)
    new_achievements = []
    
    # üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—á–∞—Å—Ç–∏–µ
    participation_levels = [
        ("newbie", 5),
        ("advanced", 50),
        ("veteran", 250),
        ("legend", 1000)
    ]
    
    for level, required in participation_levels:
        if stats['total_contests'] >= required:
            unlocked = await db.check_and_unlock_achievement(user_id, "participation", level)
            if unlocked:
                new_achievements.append({
                    "type": "participation",
                    "level": level,
                    "emoji": config.ACHIEVEMENTS["participation"][level]["emoji"],
                    "name": config.ACHIEVEMENTS["participation"][level]["name"]
                })
    
    # üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–±–µ–¥—ã
    wins_levels = [
        ("lucky", 5),
        ("winner", 30),
        ("champion", 100),
        ("king", 1000)
    ]
    
    for level, required in wins_levels:
        if stats['total_wins'] >= required:
            unlocked = await db.check_and_unlock_achievement(user_id, "wins", level)
            if unlocked:
                new_achievements.append({
                    "type": "wins",
                    "level": level,
                    "emoji": config.ACHIEVEMENTS["wins"][level]["emoji"],
                    "name": config.ACHIEVEMENTS["wins"][level]["name"]
                })
    
    # üë• –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referral_count = await db.get_referral_count(user_id)
    referral_levels = [
        ("friend", 5),
        ("popular", 25),
        ("influencer", 100),
        ("blogger", 1000)
    ]
    
    for level, required in referral_levels:
        if referral_count >= required:
            unlocked = await db.check_and_unlock_achievement(user_id, "referrals", level)
            if unlocked:
                new_achievements.append({
                    "type": "referrals",
                    "level": level,
                    "emoji": config.ACHIEVEMENTS["referrals"][level]["emoji"],
                    "name": config.ACHIEVEMENTS["referrals"][level]["name"]
                })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    for achievement in new_achievements:
        try:
            await bot.send_message(
                user_id,
                f"üéâ **–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!**\n\n"
                f"{achievement['emoji']} **{achievement['name']}**\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: /start ‚Üí üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: {e}")


@router.callback_query(F.data == "achievements")
async def show_achievements(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    stats = await db.get_user_stats(user_id)
    referral_count = await db.get_referral_count(user_id)
    
    text = "üèÜ **–í–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø**\n\n"
    
    # üéØ –£—á–∞—Å—Ç–∏–µ
    text += "üéØ **–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:**\n"
    participation_levels = [
        ("newbie", 5, "–ù–æ–≤–∏—á–æ–∫"),
        ("advanced", 50, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"),
        ("veteran", 250, "–í–µ—Ç–µ—Ä–∞–Ω"),
        ("legend", 1000, "–õ–µ–≥–µ–Ω–¥–∞")
    ]
    
    for level, required, name in participation_levels:
        has = await db.has_achievement(user_id, "participation", level)
        current = stats['total_contests']
        
        if has:
            text += f"   ‚úÖ {name} ({required})\n"
        else:
            text += f"   üîí {name} ({current}/{required})\n"
    
    # üèÜ –ü–æ–±–µ–¥—ã
    text += "\nüèÜ **–ü–æ–±–µ–¥—ã:**\n"
    wins_levels = [
        ("lucky", 5, "–í–µ–∑—É–Ω—á–∏–∫"),
        ("winner", 30, "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å"),
        ("champion", 100, "–ß–µ–º–ø–∏–æ–Ω"),
        ("king", 1000, "–ö–æ—Ä–æ–ª—å")
    ]
    
    for level, required, name in wins_levels:
        has = await db.has_achievement(user_id, "wins", level)
        current = stats['total_wins']
        
        if has:
            text += f"   ‚úÖ {name} ({required})\n"
        else:
            text += f"   üîí {name} ({current}/{required})\n"
    
    # üë• –†–µ—Ñ–µ—Ä–∞–ª—ã
    text += "\nüë• **–†–µ—Ñ–µ—Ä–∞–ª—ã:**\n"
    referral_levels = [
        ("friend", 5, "–î—Ä—É–≥"),
        ("popular", 25, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π"),
        ("influencer", 100, "–õ–∏–¥–µ—Ä –º–Ω–µ–Ω–∏–π"),
        ("blogger", 1000, "–ë–ª–æ–≥–µ—Ä")
    ]
    
    for level, required, name in referral_levels:
        has = await db.has_achievement(user_id, "referrals", level)
        current = referral_count
        
        if has:
            text += f"   ‚úÖ {name} ({required})\n"
        else:
            text += f"   üîí {name} ({current}/{required})\n"
    
    # üî• –û—Å–æ–±—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
    text += "\nüî• **–û—Å–æ–±—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
    text += "   üîí –ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ (0/2 –ø–æ–¥—Ä—è–¥)\n"
    text += "   üîí –°–µ—Ä–∏—è –ø–æ–±–µ–¥ (0/3 –ø–æ–¥—Ä—è–¥)\n"
    text += "   üîí –ù–µ–≤–æ–∑–º—É—Ç–∏–º—ã–π (0/5 –ø–æ–¥—Ä—è–¥)\n"
    text += "\nüí° –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ!"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()
